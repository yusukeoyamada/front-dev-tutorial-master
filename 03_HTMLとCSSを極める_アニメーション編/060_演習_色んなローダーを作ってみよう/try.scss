@use "mixin" as *;

.try {
  // 遠近感を出す為のもの。基本的には親要素に指定。始点を意味する。
  // ただ、下記の状態だと、親要素の真ん中を始点として、遠近感を出すので、微妙に傾いてしまう。
  // perspective: 120px;
  // perspective-origin: center center; // これがデフォルト

  /** ここに記述しよう */
  .spinner {
    width: 40px;
    height: 40px;
    background-color: #333;
    margin: 100px auto;

    @include animation(
      $name: sk-rotateplane2,
      $duration: 1.2s,
      $iteration-count: infinite,
      $timing-function: ease-in-out,
    )
  }

  @keyframes sk-rotateplane2 {
    0% {
      // rotateX()は、x軸を起点とした回転を意味する。手前側に回転することになる。
      // rotateY()は、y軸を起点とした回転を意味する。横側に回転することになる。
      // transform: rotateX(0) rotateY(0);

      // 親要素の特定の子要素だけ遠近感を出したい場合は、以下のように、transformのperspectiveを使う。
      transform: perspective(120px) rotateX(0) rotateY(0);
    }
    50% {
      // 「-180deg」は、180度を意味する。
      // transform: rotateX(-180deg) rotateY(0);
      transform: perspective(120px) rotateX(-180deg) rotateY(0);
    }
    100% {
      // transform: rotateX(-180deg) rotateY(-180deg);
      transform: perspective(120px) rotateX(-180deg) rotateY(-180deg);
    }
  }

  .double-spinner {
    width: 40px;
    height: 40px;
    position: relative;
    margin: 100px auto;

    & > div {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      background-color: #333;
      opacity: 0.6;

      // 以下で要素が重なるようにしている。
      position: absolute;
      top: 0;
      left: 0;

      @include animation(
        $name: sk-bounce2,
        $duration: 2s,
        $iteration-count: infinite,
        $timing-function: ease-in-out,
      );

      &:nth-child(2) {
        animation-delay: -1s;
      }
    }
  }

  @keyframes sk-bounce2 {
    0%, 100% {
      transform: scale(0);
    }
    50% {
      transform: scale(1);
    }
  }

  .rect-spinner {
    margin: 100px auto;
    width: 50px;
    height: 40px;
    text-align: center; // インライン要素に対して(inline-blockも含む)
    letter-spacing: -2px; // インライン要素に対して、文字と文字の間隔を設定する。

    & > div {
      background-color: #333;
      height: 100%;
      width: 6px;
      display: inline-block;

      @include animation(
        $name: sk-stretchdelay2,
        $duration: 1.2s,
        $iteration-count: infinite,
        $timing-function: ease-in-out,
      );

      @for $i from 1 through 5 {
        &:nth-child(#{$i}) {
          // マイナスで設定すると、他の要素よりも早くanimationを適用できる。
          // 初回が「$duration: 1.2s」に合わせて、「-1.2」となるようにした。
          animation-delay: -1.3s + $i * 0.1s;
          // -1.2s = -1.3s + 0.1s(1 * 0.1s)
          // -1.1s = -1.3s + 0.2s(2 * 0.1s)
          // -1.0s = -1.3s + 0.3s(3 * 0.1s)
          // -0.9s = -1.3s + 0.4s(4 * 0.1s)
          // -0.8s = -1.3s + 0.5s(5 * 0.1s)
        }
      }
    }
  }

  @keyframes sk-stretchdelay2 {
    0%, 40%, 100% {
      transform: scaleY(0.4);
    }
    20% {
      transform: scaleY(1);
    }
  }
}
