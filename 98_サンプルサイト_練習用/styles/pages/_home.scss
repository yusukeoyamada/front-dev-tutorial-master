// メインscssクラス
@use "../globals/" as *;      // 「"../globals/index"」と同じ意味。
@use "../parts/common" as *;

#container {
  // 「mobile-menu__btn」押下時のアニメーションを起動させる為
  transition: transform 0.5s, box-shadow 0.5s;

  // 以下で、「mobile-menu__btn」押下後に表示されるlogo部分が、押下前には見えなくなる。
  position: relative;
  z-index: 10;
  background-color: $cWhite;
}

// popularの灰色背景でサイドバー部分が隠れてしまうので、以下を設定
#main-content {
  position: relative;
  z-index: 0;
}

// popularの灰色背景でサイドバー部分が隠れてしまうので、以下を設定
  // main-contentの中で、mainが1番背面になる。
main {
  position: relative;
  z-index: -1;
}

.header {
  position: fixed;                  // これで、該当部分をウィンドウの上部に固定化できる
  top: 0;
  left: 0;
  width: 100%;
  height: $navHeight;
  background-color: transparent;    // 初期状態では、透明に
  z-index: 100;                     // 「ヘッダー」を前面にする為に

  display: flex;
  align-items: center;              // 上下中央揃えに

  // jsで付与するクラス
  // content方面にスクロールした時に、適用される
  &.triggered {
    background-color: rgba(255, 255, 255, 0.9); // 「255, 255, 255」で白色、「0.9」は透明度(「1」が最大)
    box-shadow: 10px 0 25px -10px rgba(0, 0, 0, 0.5);
  }

  &__inner {
    display: flex;                  // 要素を横並びに(モバイル以外も横並びなので)
    justify-content: space-between; // 左右端の隙間を無くし、均等に横方向に間を開ける
    align-items: center;            // 上下中央揃えに

    @extend .content-width;         // 「__inner」部分の左右の余白等を指定(headerは、「width: 100%」なので)
                                    // 「id="content"」部分と左右の幅を合わせる為
  }

  &__nav {
    @extend .flex;                  // navを媒体に応じて、横に並べたり、縦に並べたりする
    justify-content: space-between; // 左右端の隙間を無くし、均等に横方向に間を開ける
    align-items: center;            // 上下中央揃えになる
    text-align: center;             // navの文字列を中央に

    display: none;                  // スマホの時には、非表示に
    @include mq(lg) {               // デスクトップの時には、表示
      display: block;
    }
  }

  &__ul {
    // @extend .flex;               // 文字を媒体に応じて、変更する必要がないので
    display: flex;                  // 横並びに
    align-items: center;            // 上下中央揃えに

    list-style: none;               //　「・」を消す処理
    padding: 0;                     // デフォルトでulについている部分を消す
  }

  &__li {
    margin: 10px;

    // 以下のように、上下の幅を揃える処理をするのは大切
    @include mq(md) {
      margin-left: 30px;
      margin-right: 0;
    }

    & > a {
      color: $cBlack;
      text-decoration: none;        // 下線を消す処理。「underline」が下線を指す。
      text-transform: uppercase;    // 全ての文字を大文字に
    }
  }

  // 「.logo」は別のところでも使うから、別途記述している。
  & .logo {
    font-size: 35px;                // ここは、一番下の「.logo」で指定しているものを上書いている
    justify-content: center;        // 左右中央揃えにする為に

    @include mq(md) {
      justify-content: flex-start;  // 左側に寄せる為に
    }
  }
}

.hero {
  @extend .pb-lg;
}

.travel {
  @extend .content-width;   // 「.travel」部分の左右の余白等を指定
  @extend .mb-lg;           // 「.travel」部分の下の余白を指定

  &__inner {
    // 画像の内側に影が表示されるように
    // ローカルスタックコンテキストを生成(z-indexが指定されていないものは、この中に内包)
    position: relative;
    z-index: 0;

    @extend .flex;
    justify-content: space-between; // 左右端の隙間を無くし、均等に横方向に間を開ける

    background-color: $cBgGray;
    padding: 15px;

    @include mq(md) {
      padding: 50px;
    }

    @include mq(xl) {
      padding: 50px 150px;
    }
  }

  &__img {
    height: 300px;
    @extend .mb-sm;
    box-shadow: inset 0 0 30px $cBlack;      // 内側に影をつける場合

    @include mq(md) {
      flex-basis: 47%;      // 画像とテキストを横に並べる際には、2つ並べるようにする(余白含め)
    }

    @include mq(lg) {
      height: 400px;
    }

    & > img {
      // 画像の内側に、「__img」で設定した影が表示されるように
      // ローカルスタックコンテキストの中で最背面に(「__img」の方が、前面に出てくるから、影が見えるように)
      position: relative;
      z-index: -1;

      opacity: 1;

      // 以下により、imgのサイズが、「__img」の大きさに合うようになる。
      object-fit: cover;
      width: 100%;
      height: 100%;
    }
  }

  &__texts {
    @extend .pb-sm;

    @include mq(md) {
      display: flex;
      align-items: flex-end; // 「flex-start」だと、横並びの時に、上方向に行く。
      flex-basis: 47%;       // 画像とテキストを横に並べる際には、2つ並べるようにする(余白含め)
    }

    &.inview {
      & .travel__title::before {
        // animationで、棒線が現れるようにする
        @include animation(
          $name: scaleX,
          $duration: 0.3s,
          $delay: 1.5s,
        )
      }
    }
  }

  &__title {
    position: relative;

    &::before {
      display: none;              // スマホの時は、棒線が見えないように

      position: absolute;
      content: '';
      height: 1px;
      width: 100px;
      top: 50%;
      left: -120px;
      background-color: $cBlack;
      transform: scaleX(0);       // 初期状態は、棒線が見えないようにする
      transform-origin: right;    // 右側を起点にして、アニメーションがなされるようになる

      @include mq(lg) {
        display: block;           // 一定の媒体の時は、棒線が見えるように
      }
    }
  }

  &__description {
    @include mq(lg) {
      margin-bottom: 40px;
    }
  }
}

@keyframes scaleX {
  0% {
    transform: scaleX(0);
  }
  100% {
    transform: scaleX(1);
  }
}

.houses {
  @extend .content-width; // 「.houses」部分の左右の余白等を指定
  @extend .mb-lg;         // 「.houses」部分の下の余白を指定

  &__inner {
    @extend .flex;        // 画像を媒体に応じて、横に並べたり、縦に並べたりする
  }

  &__item {
    // 「.flex」で、横並びに切り替わるタイミングが、「md」だから
    @include mq(md) {
      flex-basis: 50%;     // 画像を横に並べる際には、2つ並べるようにする
    }
    @include mq(lg) {
      margin-bottom: 60px; // 画像ごとの下の余白を指定
    }
  }

  &__title {
    @extend .mb-sm;       // 「.houses__title」の下の余白を指定
    @extend .font-lr;     // 「.houses__title」のテキストのサイズを指定
  }

  &__btn {
    text-align: center;   // buttonは、インライン要素
    flex-basis: 100%;     // btnは、1つだけ並べるようにする
  }
}

.popular {
  &__header {
    @extend .content-width;         // 左右の余白等を指定
  }

  &__inner {
    // こっちは、画面一杯に広がって欲しいので、「@extend .content-width」をつけない。
    position: relative;

    &::before {
      // ここで、背景灰色を表現する。
      content: '';
      position: absolute;
      bottom: 0;          // ここを起点にする
      left: 0;            // ここを起点にする
      height: 90%;        // 10%空けることで、画像とのズレを表現している
      width: 100%;
      background-color: $cBgGray;
    }
  }

  &__container {
    position: relative;             // ここはローカスタックコンテキストを生成する為に、設定しただけ
    z-index: 2;                     // これで、「__inner」よりも、こっちが前面に出る。

    @extend .content-width;         // 左右の余白等を指定
    @extend .flex;                  // 画像を媒体に応じて、横に並べたり、縦に並べたりする
    justify-content: space-between; // 左右端の隙間を無くし、均等に横方向に間を開ける
  }

  &__item {
    @include mq(md) {
      flex-basis: 47%;    // 画像を横に並べる際には、2つ並べるようにする(余白含めて)
    }

    @include mq(lg) {
      flex-basis: 25%;    // 画像を横に並べる際には、4つ並べるようにする
    }

    @include mq(xl) {
      flex-basis: 23%;    // 画像を横に並べる際には、4つ並べるようにする(余白含めて)
    }
  }

  &__img {
    height: 150px;
    margin-bottom: 5px;            // イレギュラーなものの為、共通クラスは使っていない。

    @include mq(lg) {
      height: 335px;
    }

    & > img {
      height: 100%;                // 画面横幅一杯
      width: 100%;                 // 「height: 150px;」
      object-fit: cover;           // imgの「height, width」に合わせて、画像が表示される。
      // object-position: center;  // 「object-fit: cover」のデフォルトは「center」。画像の真ん中らへんが表示される。
    }
  }

  &__title {
    @extend .mb-sm;       // 下の余白を指定
    @extend .font-md;     // テキストのサイズを指定
  }

  &__btn {
    text-align: center;   // buttonは、インライン要素
    flex-basis: 100%;     // btnは、1つだけ並べるようにする

    @extend .mb-lg;       // 下の余白を指定
  }
}

.footer {
  padding: 60px 0;
  @extend .content-width;           // 「.footer」部分の左右の余白等を指定

  &__nav {
    @extend .flex;                  // navを媒体に応じて、横に並べたり、縦に並べたりする
    justify-content: space-between; // 左右端の隙間を無くし、均等に横方向に間を開ける
    align-items: center;            // 上下中央揃えになる
    text-align: center;             // navの文字列を中央に
  }

  &__ul {
    @extend .flex;                  // 文字を媒体に応じて、横に並べたり、縦に並べたりする
    list-style: none;               //　「・」を消す処理
    padding: 0;                     // デフォルトでulについている部分を消す
  }

  &__li {
    margin: 10px;

    // 以下のように、上下の幅を揃える処理をするのは大切
    @include mq(md) {
      margin-left: 0;
      margin-right: 30px;
    }

    & > a {
      color: $cSubTitle;
      text-decoration: none;        // 下線を消す処理。「underline」が下線を指す。
    }
  }

  // 「.logo」は別のところでも使うから、別途記述している。
  & > .logo {
    font-size: 38px;
    justify-content: center;        // 左右中央揃えにする為に

    @include mq(md) {
      justify-content: flex-start;  // 左側に寄せる為に
    }
  }
}

.logo {
  font-size: 42px;
  display: flex;                    // 横並びにする為に

  &__img {
    width: 0.7em;                   // 「em」は、上記「font-size」と相対的に決まる(「1em」なら、42px)
                                    // 固定値だと、font-sizeに合わして変更しにくい
  }

  &__world {
    color: $cWineRed;
  }
}

// サイドバー部分で使用
.side {
  // スマホの時は出す必要がないので
  display: none;

  position: fixed; // スクロールに追随して欲しいので、固定化する
  top: 70%;
  transform: translateY(-50%);

  @include mq(xl) {
    display: block;
  }

  & .tween-animate-title {
    color: $cBlack;
    text-decoration: none !important; // 下線を無くす(hoverした時でも)
    margin: 0 40px;
    vertical-align: middle; // 上下の中央揃え
    letter-spacing: 2px; // 文字間隔(Twitterなどの)を調整
  }

  &.left {
    left: 50px;

    & .side__inner {
      transform-origin: top left; // 文字列の左上から回転するように(デフォルトは真ん中)
      transform: rotate(-90deg); // 反時計回りに90度
    }
  }

  &.right {
    right: 50px;

    & .side__inner {
      transform-origin: top right; // 文字列の左上から回転するように(デフォルトは真ん中)
      transform: rotate(90deg); // 反時計回りに90度
    }
  }
}

// サイドバー部分のTwitter_iconなどで使用
.icon {
  position: relative;

  &::before {
    content: '';
    position: absolute;
    top: 50%; // 上下中央揃え
    left: -20px;
    // 以下1文字分の大きさに
    width: 1em;
    height: 1em;
    transform: translateY(-50%);

    background-position: center;
    background-repeat: none; // backgroudの表示を繰り返さない
    background-size: contain; // 画像が切れることがなくなる
  }

  &.twitter::before {
    background-image: url(../images/twitter.svg); // sassからだと、「url(../../images/twitter.svg)」だが、style.cssの階層に合わせる
  }

  &.fb::before {
    background-image: url(../images/facebook.svg); // sassからだと、「url(../../images/twitter.svg)」だが、style.cssの階層に合わせる
  }
}
